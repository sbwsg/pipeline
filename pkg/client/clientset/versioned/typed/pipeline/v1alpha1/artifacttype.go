/*
Copyright 2019 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	scheme "github.com/tektoncd/pipeline/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ArtifactTypesGetter has a method to return a ArtifactTypeInterface.
// A group's client should implement this interface.
type ArtifactTypesGetter interface {
	ArtifactTypes(namespace string) ArtifactTypeInterface
}

// ArtifactTypeInterface has methods to work with ArtifactType resources.
type ArtifactTypeInterface interface {
	Create(*v1alpha1.ArtifactType) (*v1alpha1.ArtifactType, error)
	Update(*v1alpha1.ArtifactType) (*v1alpha1.ArtifactType, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.ArtifactType, error)
	List(opts v1.ListOptions) (*v1alpha1.ArtifactTypeList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ArtifactType, err error)
	ArtifactTypeExpansion
}

// artifactTypes implements ArtifactTypeInterface
type artifactTypes struct {
	client rest.Interface
	ns     string
}

// newArtifactTypes returns a ArtifactTypes
func newArtifactTypes(c *TektonV1alpha1Client, namespace string) *artifactTypes {
	return &artifactTypes{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the artifactType, and returns the corresponding artifactType object, and an error if there is any.
func (c *artifactTypes) Get(name string, options v1.GetOptions) (result *v1alpha1.ArtifactType, err error) {
	result = &v1alpha1.ArtifactType{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("artifacttypes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ArtifactTypes that match those selectors.
func (c *artifactTypes) List(opts v1.ListOptions) (result *v1alpha1.ArtifactTypeList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.ArtifactTypeList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("artifacttypes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested artifactTypes.
func (c *artifactTypes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("artifacttypes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a artifactType and creates it.  Returns the server's representation of the artifactType, and an error, if there is any.
func (c *artifactTypes) Create(artifactType *v1alpha1.ArtifactType) (result *v1alpha1.ArtifactType, err error) {
	result = &v1alpha1.ArtifactType{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("artifacttypes").
		Body(artifactType).
		Do().
		Into(result)
	return
}

// Update takes the representation of a artifactType and updates it. Returns the server's representation of the artifactType, and an error, if there is any.
func (c *artifactTypes) Update(artifactType *v1alpha1.ArtifactType) (result *v1alpha1.ArtifactType, err error) {
	result = &v1alpha1.ArtifactType{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("artifacttypes").
		Name(artifactType.Name).
		Body(artifactType).
		Do().
		Into(result)
	return
}

// Delete takes name of the artifactType and deletes it. Returns an error if one occurs.
func (c *artifactTypes) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("artifacttypes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *artifactTypes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("artifacttypes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched artifactType.
func (c *artifactTypes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ArtifactType, err error) {
	result = &v1alpha1.ArtifactType{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("artifacttypes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
