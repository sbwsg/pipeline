/*
Copyright 2019 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArtifactLister helps list Artifacts.
type ArtifactLister interface {
	// List lists all Artifacts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Artifact, err error)
	// Artifacts returns an object that can list and get Artifacts.
	Artifacts(namespace string) ArtifactNamespaceLister
	ArtifactListerExpansion
}

// artifactLister implements the ArtifactLister interface.
type artifactLister struct {
	indexer cache.Indexer
}

// NewArtifactLister returns a new ArtifactLister.
func NewArtifactLister(indexer cache.Indexer) ArtifactLister {
	return &artifactLister{indexer: indexer}
}

// List lists all Artifacts in the indexer.
func (s *artifactLister) List(selector labels.Selector) (ret []*v1alpha1.Artifact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Artifact))
	})
	return ret, err
}

// Artifacts returns an object that can list and get Artifacts.
func (s *artifactLister) Artifacts(namespace string) ArtifactNamespaceLister {
	return artifactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArtifactNamespaceLister helps list and get Artifacts.
type ArtifactNamespaceLister interface {
	// List lists all Artifacts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Artifact, err error)
	// Get retrieves the Artifact from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Artifact, error)
	ArtifactNamespaceListerExpansion
}

// artifactNamespaceLister implements the ArtifactNamespaceLister
// interface.
type artifactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Artifacts in the indexer for a given namespace.
func (s artifactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Artifact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Artifact))
	})
	return ret, err
}

// Get retrieves the Artifact from the indexer for a given namespace and name.
func (s artifactNamespaceLister) Get(name string) (*v1alpha1.Artifact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("artifact"), name)
	}
	return obj.(*v1alpha1.Artifact), nil
}
