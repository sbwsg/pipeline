/*
Copyright 2019 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArtifactInstanceLister helps list ArtifactInstances.
type ArtifactInstanceLister interface {
	// List lists all ArtifactInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ArtifactInstance, err error)
	// ArtifactInstances returns an object that can list and get ArtifactInstances.
	ArtifactInstances(namespace string) ArtifactInstanceNamespaceLister
	ArtifactInstanceListerExpansion
}

// artifactInstanceLister implements the ArtifactInstanceLister interface.
type artifactInstanceLister struct {
	indexer cache.Indexer
}

// NewArtifactInstanceLister returns a new ArtifactInstanceLister.
func NewArtifactInstanceLister(indexer cache.Indexer) ArtifactInstanceLister {
	return &artifactInstanceLister{indexer: indexer}
}

// List lists all ArtifactInstances in the indexer.
func (s *artifactInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.ArtifactInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArtifactInstance))
	})
	return ret, err
}

// ArtifactInstances returns an object that can list and get ArtifactInstances.
func (s *artifactInstanceLister) ArtifactInstances(namespace string) ArtifactInstanceNamespaceLister {
	return artifactInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArtifactInstanceNamespaceLister helps list and get ArtifactInstances.
type ArtifactInstanceNamespaceLister interface {
	// List lists all ArtifactInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ArtifactInstance, err error)
	// Get retrieves the ArtifactInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ArtifactInstance, error)
	ArtifactInstanceNamespaceListerExpansion
}

// artifactInstanceNamespaceLister implements the ArtifactInstanceNamespaceLister
// interface.
type artifactInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArtifactInstances in the indexer for a given namespace.
func (s artifactInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ArtifactInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArtifactInstance))
	})
	return ret, err
}

// Get retrieves the ArtifactInstance from the indexer for a given namespace and name.
func (s artifactInstanceNamespaceLister) Get(name string) (*v1alpha1.ArtifactInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("artifactinstance"), name)
	}
	return obj.(*v1alpha1.ArtifactInstance), nil
}
